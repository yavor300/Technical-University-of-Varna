package bg.tu_varna.sit.task1;

/**
 * Задача 1
 * <p>
 * Подберете подходящи модификатори за достъп в задачата и
 * поставете сорс файловете в пакет bg.tu_varna.sit.task1.
 * <p>
 * Да се състави програма за стоки, предлагани в хранителен магазин.
 * За целта са необходими:
 * <p>
 * - Интерфейс доставка (Delivery) с метод, който връща дали
 * дадената стока се нуждае от доставка (needsDelivery);
 * <p>
 * - Енумерация за тип стока (ItemType) със стойности основни
 * храни (FOOD_ESSENTIALS), храни (FOOD) и напитки (DRINKS);
 * <p>
 * - Енумерация за тип вода (WaterType) със стойности минерална (MINERAL),
 * трапезна (TABLE), изворна (SPRING) и газирана (SODA);
 * <p>
 * - Абстрактен клас стока (Item) с атрибути за тип на стоката (itemType),
 * единична цена (itemPrice) и наличност (availableQuantity), който имплементира
 * интерфейси доставка и Comparable. Дефинирайте конструктор по всички полета,
 * методи за достъп и метод за равенство (по всички полета).
 * Методът за сравнение да е по наличност;
 * <p>
 * - Клас бисквити (Biscuits), наследник на клас стока, с атрибут име (name).
 * Дефинирайте конструтор по всички полета, методи за достъп, равенство (по всички полета)
 * и за текстово описание. Доставка е необходима ако наличността е под 5 бройки;
 * <p>
 * - Клас хляб (Bread), наследник на клас стока, с атрибут име (name).
 * Дефинирайте конструтор по всички полета, методи за достъп, равенство (по всички полета)
 * и за текстово описание. Доставка е необходима ако наличността е под 15 бройки;
 * <p>
 * - Клас масло (Butter), наследник на клас стока, с атрибути грамаж на опаковката
 * (packing) и масленост (butterContent). Дефинирайте конструтор по всички полета,
 * методи за достъп, равенство (по всички полета) и за текстово описание.
 * Доставка е необходима ако има за опаковка под 250 грама има
 * по-малко от 20 броя, или ако наличността е под 30 броя;
 * <p>
 * - Клас шоколад (Chocolate), наследник на клас стока, с атрибути име (name)
 * и процент съдържание на какао (cocoaContent). Дефинирайте конструтор по
 * всички полета, методи за достъп, равенство (по всички полета) и за текстово
 * описание. Доставка е необходима ако наличността е под 10 броя;
 * <p>
 * - Клас яйца (Eggs), наследник на клас стока, с атрибут брой в опаковка (numberInPack).
 * Дефинирайте конструтор по всички полета, методи за достъп, равенство (по всички полета)
 * и за текстово описание. Доставка е необходима ако наличността е под 15 броя;
 * - Клас мляко (Milk), наследник на клас стока, с атрибути име (name) и годност в дни
 * (daysToExpire). Дефинирайте конструтор по всички полета, методи за достъп,
 * равенство (по всички полета) и за текстово описание. Доставка е необходима ако годността
 * изтича след по-малко от седем дни и наличността е по-малка от 15 броя;
 * <p>
 * - Клас вода (Water), наследник на клас стока, с атрибути име (name) и тип (waterType)
 * Дефинирайте конструтор по всички полета, методи за достъп, равенство (по всички полета) и за
 * текстово описание. Доставка е необходима ако газираната вода е
 * по-малко от 30 броя или ако наличността е по-малка от 15 броя;
 * <p>
 * - Клас хранителен магазин (Shop), който има като атрибут списък с уникални стоки (items). Методи:
 * - за добавяне на стока (addItem);
 * - за намиране и връщане броя стоки, за които е необходима доставка (countItemsForDelivery);
 * - за изчисляване и връщане на цената на стоките в магазина (calculateItemsPrice);
 * - за намиране и връщане стоката с най-голяма наличност (getItemWithMostAvailableQuantity);
 * - за намиране и връщане на типа стока, от която има най-малка наличност (getItemTypeWithLeastQuantity);
 * - за текстово описание.
 * <p>
 * Дефинирайте клас Application с главна функция и тествайте описаните функционалности.
 */
public class Application {

  public static void main(String[] args) {

    Item milk = new Milk(ItemType.DRINKS, 20, 1, "milk", 2);
    Item chocolate = new Chocolate(ItemType.FOOD, 14, 2, "choco", 90);

    Shop shop = new Shop();
    shop.addItem(milk);
    shop.addItem(chocolate);

    System.out.println(shop.calculateItemsPrice());
    System.out.println(shop.getItemTypeWithLeastQuantity());
    System.out.println(shop.getItemWithMostAvailableQuantity());
    System.out.println(shop.countItemsForDelivery());
    System.out.println(shop.toString());
  }
}
