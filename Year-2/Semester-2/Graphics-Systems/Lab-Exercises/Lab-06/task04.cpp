#include <graphics.h>

#include <iostream>

using namespace std;

int main() {
  //хистограма приход-разход
  // реалните данни, които се изобразяват като вертикални стълбчета, се четат от файл или
  //клавиатура или масив
  float prihodi[] = {
    5,
    12,
    18,
    8,
    13,
    23,
    14,
    10
  };
  float razhodi[] = {
    2,
    1,
    8,
    3,
    6,
    6,
    5,
    4
  };
  int n = sizeof(prihodi) / sizeof(prihodi[0]);
  int winwidth = 800, winheight = 600; // параметри на прозореца на графичната система
  int Px = 600, Py = 400, D = 50, Ds = 40, Dc = 30, x0 = 100, y0 = 450; //параметри на графичния прозорец, в който
  //ще се изобразят данните (вътре в прозореца на графичната система)
  int i, x1, y1, x2, y2;
  //намиране на диапазона на изменение на данните
  float prihodmax = prihodi[0];
  float razhodmax = razhodi[0];
  for (int i = 1; i < n; i++) {
    if (prihodi[i] > prihodmax) prihodmax = prihodi[i];
    if (razhodi[i] > razhodmax) razhodmax = razhodi[i];
  }
  //определяне на скалния коефициент за скалата със стойностите(хоризонталната)
  float s = (prihodmax + razhodmax) / Px;
  // определяне на новото положение на вертикалната ос,съответстващо на максималния разход
  int x0n = x0 + razhodmax / s;
  // инициализация на графичната система чрез отваряне на графичен прозорец със зададен размер
  initwindow(winwidth, winheight);
  //изчертаване на графичния прозорец
  line(x0, y0, x0 + Px, y0); //хоризонтална ос
  line(x0n, y0, x0n, y0 - Py); //вертикална ос , изместена със стойността на макс. Разход, преобразуван в
  //пиксели
  int h = prihodmax / s; //частта от хоризонталната ос, върху която се разполагат приходите
  int I = h / D; // брой деления по тази част от скалата
  char text[10];
  //изчертаване и надписване на деленията по оста на приходите
  for (i = 0; i <= I; i++) {
    line(x0n + i * D, y0, x0n + i * D, y0 + 3); //изчертаване на деленията
    gcvt(i * D * s, 3.2, text); //преобразуване на реалната стойност, съответстваща на делението в
    //символен низ
    settextjustify(1, 2);
    outtextxy(x0n + i * D, y0 + 5, text); // извеждане на стойността, съответстваща на делението

  }
  int h1 = razhodmax / s; //частта от вертикалната ос, върху която се разполагат разходите
  int J = h1 / D; // брой деления по тази част от скалата
  //изчертаване и надписване на деленията по оста на разходите
  for (i = 0; i <= J; i++) {
    line(x0n - i * D, y0, x0n - i * D, y0 + 3); //изчертаване на деленията
    gcvt(i * D * s, 3.2, text); //преобразуване на реалната стойност, съответстваща на делението в
    //символен низ
    settextjustify(1, 2);
    outtextxy(x0n - i * D, y0 + 5, text); // извеждане на стойността, съответстваща на делението
  }
  // изобразяване на стълбчетата, съответстващи на приходите
  for (i = 1; i < n + 1; i++) {
    // изобразяване на стълбчетата, съответстващи на приходите
    x1 = x0n; //x координата на горен ляв ъгъл
    y1 = y0 - i * (Ds + Dc); // y координата на горен ляв ъгъл
    x2 = x0n + (prihodi[i - 1]) / s; //х координата на долен ляв ъгъл
    y2 = y0 - i * (Ds + Dc) + Ds; // у координата на долен десен ъгъл
    setfillstyle(1, i + 1);
    bar(x1, y1, x2, y2);
    // изобразяване на стълбчетата, съответстващи на разходите
    x1 = x0n - (razhodi[i - 1]) / s; //x координата на горен ляв ъгъл
    y1 = y0 - i * (Ds + Dc); // y координата на горен ляв ъгъл
    x2 = x0n; //х координата на долен ляв ъгъл
    y2 = y0 - i * (Ds + Dc) + Ds; // у координата на долен десен ъгъл
    setfillstyle(8, i + 1);
    bar(x1, y1, x2, y2);
  }
  getch();
  return 0;
}
