[ PROGRAM ] : program
[ LBRACKET ] : {
[ INT ] : int
[ IDENTIFIER ] : num
[ BECOMES ] : =
[ NUMBER ] : 0
[ SEMICOLON ] : ;
[ IDENTIFIER ] : fib
[ LPAREN ] : (
[ INT ] : int
[ IDENTIFIER ] : num
[ COMMA ] : ,
[ INT ] : int
[ LSQUARE ] : [
[ RSQUARE ] : ]
[ IDENTIFIER ] : memo
[ RPAREN ] : )
[ ARROW ] : ->
[ INT ] : int
[ LBRACKET ] : {
[ IF ] : if
[ LPAREN ] : (
[ IDENTIFIER ] : memo
[ LSQUARE ] : [
[ IDENTIFIER ] : num
[ RSQUARE ] : ]
[ GREATER ] : >
[ NUMBER ] : 1
[ RPAREN ] : )
[ LBRACKET ] : {
[ RETURN ] : return
[ IDENTIFIER ] : memo
[ LSQUARE ] : [
[ IDENTIFIER ] : num
[ RSQUARE ] : ]
[ SEMICOLON ] : ;
[ RBRACKET ] : }
[ IF ] : if
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ EQUALS ] : ==
[ NUMBER ] : 0
[ RPAREN ] : )
[ LBRACKET ] : {
[ RETURN ] : return
[ NUMBER ] : 0
[ SEMICOLON ] : ;
[ RBRACKET ] : }
[ IF ] : if
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ EQUALS ] : ==
[ NUMBER ] : 1
[ RPAREN ] : )
[ LBRACKET ] : {
[ RETURN ] : return
[ NUMBER ] : 1
[ SEMICOLON ] : ;
[ RBRACKET ] : }
[ INT ] : int
[ IDENTIFIER ] : res
[ BECOMES ] : =
[ AT ] : @
[ IDENTIFIER ] : fib
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ MINUS ] : -
[ NUMBER ] : 1
[ COMMA ] : ,
[ IDENTIFIER ] : memo
[ RPAREN ] : )
[ PLUS ] : +
[ AT ] : @
[ IDENTIFIER ] : fib
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ MINUS ] : -
[ NUMBER ] : 2
[ COMMA ] : ,
[ IDENTIFIER ] : memo
[ RPAREN ] : )
[ SEMICOLON ] : ;
[ IDENTIFIER ] : memo
[ LSQUARE ] : [
[ IDENTIFIER ] : num
[ RSQUARE ] : ]
[ BECOMES ] : =
[ IDENTIFIER ] : res
[ SEMICOLON ] : ;
[ RETURN ] : return
[ IDENTIFIER ] : res
[ SEMICOLON ] : ;
[ RBRACKET ] : }
[ IDENTIFIER ] : main
[ LPAREN ] : (
[ RPAREN ] : )
[ ARROW ] : ->
[ VOID ] : void
[ LBRACKET ] : {
[ PRINT ] : print
[ LPAREN ] : (
[ STRING_LITERAL ] : Please enter a non-negative number:
[ RPAREN ] : )
[ SEMICOLON ] : ;
[ READ ] : read
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ RPAREN ] : )
[ SEMICOLON ] : ;
[ IF ] : if
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ LESS ] : <
[ NUMBER ] : 0
[ RPAREN ] : )
[ LBRACKET ] : {
[ PRINT ] : print
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ COMMA ] : ,
[ STRING_LITERAL ] : is a negative number, program will now terminate!
[ RPAREN ] : )
[ SEMICOLON ] : ;
[ RETURN ] : return
[ SEMICOLON ] : ;
[ RBRACKET ] : }
[ INT ] : int
[ LSQUARE ] : [
[ RSQUARE ] : ]
[ IDENTIFIER ] : memo
[ BECOMES ] : =
[ INT ] : int
[ LSQUARE ] : [
[ IDENTIFIER ] : num
[ PLUS ] : +
[ NUMBER ] : 1
[ RSQUARE ] : ]
[ SEMICOLON ] : ;
[ INT ] : int
[ IDENTIFIER ] : i
[ BECOMES ] : =
[ NUMBER ] : 0
[ SEMICOLON ] : ;
[ IDENTIFIER ] : memo
[ LSQUARE ] : [
[ NUMBER ] : 0
[ RSQUARE ] : ]
[ BECOMES ] : =
[ NUMBER ] : 0
[ SEMICOLON ] : ;
[ IF ] : if
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ GREATER ] : >
[ NUMBER ] : 0
[ RPAREN ] : )
[ LBRACKET ] : {
[ IDENTIFIER ] : memo
[ LSQUARE ] : [
[ NUMBER ] : 1
[ RSQUARE ] : ]
[ BECOMES ] : =
[ NUMBER ] : 1
[ SEMICOLON ] : ;
[ RBRACKET ] : }
[ AT ] : @
[ IDENTIFIER ] : fib
[ LPAREN ] : (
[ IDENTIFIER ] : num
[ COMMA ] : ,
[ IDENTIFIER ] : memo
[ RPAREN ] : )
[ SEMICOLON ] : ;
[ CHAR ] : char
[ LSQUARE ] : [
[ RSQUARE ] : ]
[ IDENTIFIER ] : fib
[ BECOMES ] : =
[ STRING_LITERAL ] : Fibonacci number
[ SEMICOLON ] : ;
[ WHILE ] : while
[ LPAREN ] : (
[ IDENTIFIER ] : i
[ LESS_EQ ] : <=
[ IDENTIFIER ] : num
[ RPAREN ] : )
[ LBRACKET ] : {
[ PRINT ] : print
[ LPAREN ] : (
[ IDENTIFIER ] : fib
[ COMMA ] : ,
[ IDENTIFIER ] : i
[ COMMA ] : ,
[ CHAR_LITERAL ] : :
[ COMMA ] : ,
[ IDENTIFIER ] : memo
[ LSQUARE ] : [
[ IDENTIFIER ] : i
[ RSQUARE ] : ]
[ RPAREN ] : )
[ SEMICOLON ] : ;
[ IDENTIFIER ] : i
[ BECOMES ] : =
[ IDENTIFIER ] : i
[ PLUS ] : +
[ NUMBER ] : 1
[ SEMICOLON ] : ;
[ RBRACKET ] : }
[ RBRACKET ] : }
[ RBRACKET ] : }
